% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inputs.R
\name{dracula_checkbox}
\alias{dracula_checkbox}
\alias{update_dracula_checkbox}
\title{Dracula checkbox}
\usage{
dracula_checkbox(
  inputId,
  label,
  value = FALSE,
  width = NULL,
  color = "purple",
  textColor = "white",
  disabled = FALSE
)

update_dracula_checkbox(
  inputId,
  label = NULL,
  value = NULL,
  session = getDefaultReactiveDomain()
)
}
\arguments{
\item{inputId}{The \code{input} slot that will be used to access the value.}

\item{label}{Display label for the control, or \code{NULL} for no label.}

\item{value}{Initial value (\code{TRUE} or \code{FALSE}).}

\item{width}{The width of the input, e.g. \code{'400px'}, or \code{'100\%'};
see \code{\link[shiny:validateCssUnit]{validateCssUnit()}}.}

\item{color}{Input color.}

\item{textColor}{Text color.}

\item{disabled}{Whether to disable the checkbox.
Default to FALSE.}

\item{session}{The \code{session} object passed to function given to
\code{shinyServer}. Default is \code{getDefaultReactiveDomain()}.}
}
\value{
Send message to JavaScript
}
\description{
Dracula checkbox

Update dracula checkbox input
}
\note{
label does not work yet.
}
\examples{
if (interactive()) {
 library(shiny)
 library(dRacula)
 ui <- dracula_page(
   dracula_checkbox("checkbox", "My checkbox", color = "pink")
 )
 server <- function(input, output, session) {
   observe({
    print(input$checkbox)
   })
 }
 shinyApp(ui, server)

 # Update checkbox #
 ui <- dracula_page(
  dracula_button("go", "Update checkbox"),
  dracula_checkbox("checkbox", "My checkbox", color = "pink")
 )
 server <- function(input, output, session) {
   observeEvent(input$go, {
     update_dracula_checkbox(
       "checkbox",
       label = "Plop",
       value = "New value"
     )
   })
 }
 shinyApp(ui, server)
}
}
\seealso{
\url{https://ui.draculatheme.com/input} for all
available options.
}
