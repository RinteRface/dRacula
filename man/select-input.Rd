% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inputs.R
\name{dracula_select}
\alias{dracula_select}
\alias{update_dracula_select}
\title{Dracula select input}
\usage{
dracula_select(
  inputId,
  label,
  choices,
  selected = NULL,
  multiple = FALSE,
  selectize = TRUE,
  width = NULL,
  color = "white",
  textColor = "white",
  size = "md",
  disabled = FALSE,
  outline = FALSE
)

update_dracula_select(
  inputId,
  label = NULL,
  choices = NULL,
  selected = NULL,
  session = getDefaultReactiveDomain()
)
}
\arguments{
\item{inputId}{The \code{input} slot that will be used to access the value.}

\item{label}{Display label for the control, or \code{NULL} for no label.}

\item{choices}{List of values to select from. If elements of the list are
named, then that name --- rather than the value --- is displayed to the
user. It's also possible to group related inputs by providing a named list
whose elements are (either named or unnamed) lists, vectors, or factors. In
this case, the outermost names will be used as the group labels (leveraging
the \verb{<optgroup>} HTML tag) for the elements in the respective sublist. See
the example section for a small demo of this feature.}

\item{selected}{The initially selected value (or multiple values if \code{multiple = TRUE}). If not specified then defaults to the first value for
single-select lists and no values for multiple select lists.}

\item{multiple}{Is selection of multiple items allowed?}

\item{selectize}{Whether to use \pkg{selectize.js} or not.}

\item{width}{The width of the input, e.g. \code{'400px'}, or \code{'100\%'};
see \code{\link[shiny:validateCssUnit]{validateCssUnit()}}.}

\item{color}{Input color.}

\item{textColor}{Text color.}

\item{size}{Number of items to show in the selection box; a larger number
will result in a taller box. Not compatible with \code{selectize=TRUE}.
Normally, when \code{multiple=FALSE}, a select input will be a drop-down list,
but when \code{size} is set, it will be a box instead.}

\item{outline}{Outline variant.}

\item{session}{The \code{session} object passed to function given to
\code{shinyServer}. Default is \code{getDefaultReactiveDomain()}.}
}
\value{
Send message to JavaScript
}
\description{
Dracula select input

Update dracula select input
}
\examples{
if (interactive()) {
 library(shiny)
 library(dRacula)
 ui <- dracula_page(
   dracula_select(
    "select",
    "My select input",
    colnames(mtcars)
   )
 )
 server <- function(input, output, session) {
   observe({
    print(input$select)
   })
 }
 shinyApp(ui, server)

 # Update select #
 ui <- dracula_page(
  dracula_button("go", "Update select"),
  dracula_select(
    "select",
    "My select input",
    colnames(mtcars)
  )
 )
 server <- function(input, output, session) {
   observeEvent(input$go, {
     update_dracula_select(
       "select",
       label = "New label",
       choices = colnames(iris),
       selected = colnames(iris)[2]
     )
   })
 }
 shinyApp(ui, server)
}
}
\seealso{
\url{https://ui.draculatheme.com/select}.
}
